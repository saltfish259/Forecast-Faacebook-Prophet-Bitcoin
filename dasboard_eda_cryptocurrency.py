# -*- coding: utf-8 -*-
"""Dasboard EDA Cryptocurrency.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ul74KJ7efMDjCTo4VhoX-K_p95auPa4h
"""

# Library
import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

#---Config Page---
st.set_page_config(page_title="Crypto Market EDA Dashboard", page_icon="💰", layout="wide")

#---Load Data---
@st.cache_data
def load_data():
  df = pd.read_csv('Bitcoin Pulse  Hourly Dataset from Markets Trends and Fear.csv')
  df['timestamp'] = pd.to_datetime(df['timestamp'])
  return df

df = load_data()

#---Crypto Mapping---
crypto_mapping = {
    'BNB_USDT_1h_close': 'BNB',
    'BTC_USDT_1h_close': 'BTC',
    'DOGE_USDT_1h_close': 'DOGE',
    'ETH_USDT_1h_close': 'ETH',
    'SOL_USDT_1h_close': 'SOL',
    'XRP_USDT_1h_close': 'XRP'
}
available_cryptos = list(crypto_mapping.values())

#---Sidebar---
st.sidebar.header("Filter")
selected_crypto = st.sidebar.selectbox("Pilih Cryptocurrency", available_cryptos)
date_range = st.sidebar.date_input("Pilih Rentang Tanggal", [df['timestamp'].min(), df['timestamp'].max()])

#---Filter data---
df_filtered = df[(df['timestamp'] >= pd.to_datetime(date_range[0])) & (df['timestamp'] <= pd.to_datetime(date_range[1]))]

crypto_col = [k for k, v in crypto_mapping.items() if v == selected_crypto][0]

#---Header---
st.title("💰 Crypto Market EDA Dashboard")

st.markdown("""
Selamat datang di **Dashboard Analisis Data Cryptocurrency**.
Di sini Anda bisa memantau harga penutupan, return harian, volatilitas, harga OHLC, dan volume perdagangan berbagai crypto secara interaktif.
""")

#---Section 1: Price Overview---
st.header(f"📈 {selected_crypto} - Price Overview")
if selected_analysis == "Close Price":
    fig = px.line(df_filtered, x='timestamp', y=crypto_col, title=f'Close Price of {selected_crypto}')
    st.plotly_chart(fig, use_container_width=True)
    last_price = df_filtered[crypto_col].dropna().iloc[-1]
    st.info(f"**Harga Close terakhir {selected_crypto}: {last_price:.2f} USD**")
    st.caption("Grafik ini memperlihatkan pergerakan harga Close untuk periode yang dipilih.")

#---Section 2: Volume Overview---
st.header(f"📊 {selected_crypto} - Volume Overview")
volume_col = crypto_col.replace('_close', '_volume') if '_close' in crypto_col else None

if volume_col in df_filtered.columns:
    fig_vol = px.bar(df_filtered, x='timestamp', y=volume_col, title=f'Volume Perdagangan {selected_crypto}')
    st.plotly_chart(fig_vol, use_container_width=True)
    last_volume = df_filtered[volume_col].dropna().iloc[-1]
    st.info(f"**Volume terakhir {selected_crypto}: {last_volume:.2f}**")
    st.caption("Grafik ini memperlihatkan volume transaksi per hari.")

#---Section 3: Volatility Overview (collapsible)---
with st.expander("🔍 Volatility Analysis (High - Low)"):
    high_col = crypto_col.replace('close', 'high')
    low_col = crypto_col.replace('close', 'low')

    if high_col in df_filtered.columns and low_col in df_filtered.columns:
        df_filtered['volatility'] = df_filtered[high_col] - df_filtered[low_col]
        fig_volatility = px.line(df_filtered, x='timestamp', y='volatility', title=f'Volatility (High - Low) {selected_crypto}')
        st.plotly_chart(fig_volatility, use_container_width=True)
        last_volatility = df_filtered['volatility'].dropna().iloc[-1]
        st.info(f"**Volatility terakhir {selected_crypto}: {last_volatility:.2f} USD**")
        st.caption("Grafik ini memperlihatkan volatilitas harga harian dari High dan Low.")

#---Section 4: Correlation Analysis---
st.header("🔗 Correlation Analysis")
selected_multiple_crypto = st.multiselect("Pilih lebih dari satu Cryptocurrency untuk melihat korelasi:", available_cryptos)

if len(selected_multiple_crypto) > 1:
    selected_cols = [k for k, v in crypto_mapping.items() if v in selected_multiple_crypto]
    corr = df_filtered[selected_cols].corr()
    fig_corr, ax = plt.subplots(figsize=(8,6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig_corr)
    st.caption("Heatmap ini menggambarkan hubungan antar harga close crypto yang dipilih.")

#---Section 5: Key Insight---
st.header("💡 Key Insights")
if len(selected_multiple_crypto) > 1:
    max_corr = corr.unstack().sort_values(ascending=False).drop_duplicates()
    highest_corr = max_corr[max_corr < 1].idxmax()
    st.success(f"Korelasi tertinggi antara **{highest_corr[0]}** dan **{highest_corr[1]}** sebesar **{max_corr[highest_corr]:.2f}**.")
else:
    st.info("Pilih lebih dari satu crypto untuk melihat insight korelasi.")

#---Footer---
st.markdown("---")
st.caption("Data Source: Bitcoin Pulse Hourly Dataset | Disclaimer: Data ini hanya untuk keperluan edukasi dan bukan rekomendasi investasi.")
